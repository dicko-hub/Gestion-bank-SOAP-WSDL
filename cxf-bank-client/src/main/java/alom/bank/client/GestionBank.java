package alom.bank.client;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.3.7
 * 2020-10-08T17:08:06.393+02:00
 * Generated source version: 3.3.7
 *
 */
@WebService(targetNamespace = "http://front.server.bank.alom/", name = "GestionBank")
@XmlSeeAlso({ObjectFactory.class})
public interface GestionBank {

    @WebMethod
    @RequestWrapper(localName = "removeMoney", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.RemoveMoney")
    @ResponseWrapper(localName = "removeMoneyResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.RemoveMoneyResponse")
    @WebResult(name = "return", targetNamespace = "")
    public int removeMoney(

        @WebParam(name = "compte", targetNamespace = "")
        alom.bank.client.Compte compte,
        @WebParam(name = "somme", targetNamespace = "")
        int somme
    ) throws IncorrectValueException_Exception, CompteNotExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "findClient", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.FindClient")
    @ResponseWrapper(localName = "findClientResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.FindClientResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Client findClient(

        @WebParam(name = "prenom", targetNamespace = "")
        java.lang.String prenom,
        @WebParam(name = "nom", targetNamespace = "")
        java.lang.String nom,
        @WebParam(name = "date", targetNamespace = "")
        javax.xml.datatype.XMLGregorianCalendar date
    ) throws ClientNotExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "addMoney", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.AddMoney")
    @ResponseWrapper(localName = "addMoneyResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.AddMoneyResponse")
    @WebResult(name = "return", targetNamespace = "")
    public int addMoney(

        @WebParam(name = "compte", targetNamespace = "")
        alom.bank.client.Compte compte,
        @WebParam(name = "somme", targetNamespace = "")
        int somme
    ) throws IncorrectValueException_Exception, CompteNotExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "moveBetweenDifferentClientCompte", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.MoveBetweenDifferentClientCompte")
    @ResponseWrapper(localName = "moveBetweenDifferentClientCompteResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.MoveBetweenDifferentClientCompteResponse")
    public void moveBetweenDifferentClientCompte(

        @WebParam(name = "clientPlus", targetNamespace = "")
        alom.bank.client.Client clientPlus,
        @WebParam(name = "comptePlus", targetNamespace = "")
        alom.bank.client.Compte comptePlus,
        @WebParam(name = "clientMoins", targetNamespace = "")
        alom.bank.client.Client clientMoins,
        @WebParam(name = "compteMoins", targetNamespace = "")
        alom.bank.client.Compte compteMoins,
        @WebParam(name = "montant", targetNamespace = "")
        int montant
    ) throws IncorrectValueException_Exception, IncorrectCompteOwnerException_Exception, ClientNotExistException_Exception, CompteNotExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "findMoney", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.FindMoney")
    @ResponseWrapper(localName = "findMoneyResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.FindMoneyResponse")
    @WebResult(name = "return", targetNamespace = "")
    public int findMoney(

        @WebParam(name = "compte", targetNamespace = "")
        alom.bank.client.Compte compte
    ) throws CompteNotExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "addClient", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.AddClient")
    @ResponseWrapper(localName = "addClientResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.AddClientResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Client addClient(

        @WebParam(name = "prenom", targetNamespace = "")
        java.lang.String prenom,
        @WebParam(name = "nom", targetNamespace = "")
        java.lang.String nom,
        @WebParam(name = "date", targetNamespace = "")
        javax.xml.datatype.XMLGregorianCalendar date
    ) throws ClientExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "addCompte", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.AddCompte")
    @ResponseWrapper(localName = "addCompteResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.AddCompteResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Compte addCompte(

        @WebParam(name = "client", targetNamespace = "")
        alom.bank.client.Client client,
        @WebParam(name = "compteType", targetNamespace = "")
        alom.bank.client.CompteType compteType
    ) throws CompteTypeNotExistException_Exception, ClientNotExistException_Exception, CompteTypeExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "findCompte", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.FindCompte")
    @ResponseWrapper(localName = "findCompteResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.FindCompteResponse")
    @WebResult(name = "return", targetNamespace = "")
    public alom.bank.client.Compte findCompte(

        @WebParam(name = "client", targetNamespace = "")
        alom.bank.client.Client client,
        @WebParam(name = "compteType", targetNamespace = "")
        alom.bank.client.CompteType compteType
    ) throws CompteTypeNotExistException_Exception, ClientNotExistException_Exception, CompteNotExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "removeClient", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.RemoveClient")
    @ResponseWrapper(localName = "removeClientResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.RemoveClientResponse")
    public void removeClient(

        @WebParam(name = "client", targetNamespace = "")
        alom.bank.client.Client client
    ) throws ClientNotExistException_Exception, ClientCompteNotCloseException_Exception;

    @WebMethod
    @RequestWrapper(localName = "closeCompte", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.CloseCompte")
    @ResponseWrapper(localName = "closeCompteResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.CloseCompteResponse")
    @WebResult(name = "return", targetNamespace = "")
    public int closeCompte(

        @WebParam(name = "compte", targetNamespace = "")
        alom.bank.client.Compte compte
    ) throws CompteNotExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "moveBetweenSameClientCompte", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.MoveBetweenSameClientCompte")
    @ResponseWrapper(localName = "moveBetweenSameClientCompteResponse", targetNamespace = "http://front.server.bank.alom/", className = "alom.bank.client.MoveBetweenSameClientCompteResponse")
    public void moveBetweenSameClientCompte(

        @WebParam(name = "client", targetNamespace = "")
        alom.bank.client.Client client,
        @WebParam(name = "compteTypePlus", targetNamespace = "")
        alom.bank.client.CompteType compteTypePlus,
        @WebParam(name = "compteTypeMoins", targetNamespace = "")
        alom.bank.client.CompteType compteTypeMoins,
        @WebParam(name = "montant", targetNamespace = "")
        int montant
    ) throws IncorrectValueException_Exception, CompteTypeNotExistException_Exception, ClientNotExistException_Exception, CompteNotExistException_Exception;
}
